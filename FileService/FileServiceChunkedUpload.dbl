
import System
import System.IO
import System.Net
import System.Net.Http
import System.Threading.Tasks
import System.Web.Http
import System.Collections.Generic

namespace FileService

    public partial class FileServiceController

        {Route("chunked/start/{fileName}")}
        public async method PostStartChunkedUpload, @Task<HttpResponseMessage>
            required in fileName, string
            stack record
                fileSpec, string
            endrecord
        proc
            fileSpec = Path.Combine(getStorageFolder(), fileName)
            if (File.Exists(fileSpec))
                mreturn Request.CreateResponse(HttpStatusCode.Forbidden)

            ;;BUG: 2/15/18 The BEGIN/END should not be necessary but it appears that there is a compiler bug that causes disposable data items not to be disposed at method end.
            begin
                data requestStream, @Stream, await Request.Content.ReadAsStreamAsync()
                disposable data fs, @FileStream, File.Create(fileSpec)
                await requestStream.CopyToAsync(fs)
            end

            mreturn Request.CreateResponse(HttpStatusCode.NoContent)

        endmethod

        {Route("chunked/continue/{fileName}")}
        public async method PostContinueChunkedUpload, @Task<HttpResponseMessage>
            required in fileName, string
            stack record
                fileSpec, string
            endrecord
        proc
            fileSpec = Path.Combine(getStorageFolder(), fileName)			
            if (!File.Exists(fileSpec))
                mreturn Request.CreateResponse(HttpStatusCode.BadRequest)

            ;;BUG: 2/15/18 The BEGIN/END should not be necessary but it appears that there is a compiler bug that causes disposable data items not to be disposed at method end.
            begin
                data requestStream, @Stream, await Request.Content.ReadAsStreamAsync()
                disposable data sw, @StreamWriter, File.AppendText(fileSpec)
                await requestStream.CopyToAsync(sw.BaseStream)
            end

            mreturn Request.CreateResponse(HttpStatusCode.NoContent)

        endmethod

        {Route("chunked/finish/{fileName}")}
        public async method PostFinishChunkedUpload, @Task<HttpResponseMessage>
            required in fileName, string
            stack record
                fileSpec, string
            endrecord
        proc
            fileSpec = Path.Combine(getStorageFolder(), fileName)			
            if (!File.Exists(fileSpec))
                mreturn Request.CreateResponse(HttpStatusCode.BadRequest)

            if (Request.Content.Headers.ContentLength == ^null)
                mreturn Request.CreateResponse(HttpStatusCode.BadRequest)

            if (Request.Content.Headers.ContentLength > 0)
            begin
                data requestStream, @Stream, await Request.Content.ReadAsStreamAsync()
                disposable data sw, @StreamWriter, File.AppendText(fileSpec)
                await requestStream.CopyToAsync(sw.BaseStream)
            end

            data response, @HttpResponseMessage, Request.CreateResponse(HttpStatusCode.Created)
            response.Headers.Location = new Uri(Request.RequestUri.AbsoluteUri.ToLower().Replace("chunked/finish/",""))
            response.Headers.Add("ServerFileSpec",fileSpec)

            mreturn response

        endmethod

    endclass

endnamespace
